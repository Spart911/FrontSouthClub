#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function formatSize(bytes) {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–∞
function analyzeBundle() {
  const distPath = path.join(__dirname, '../dist');
  const assetsPath = path.join(distPath, 'assets');
  
  if (!fs.existsSync(distPath)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É: npm run build');
    return;
  }
  
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ dist/assets:');
  console.log('‚îÄ'.repeat(50));
  
  let totalSize = 0;
  const files = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ assets
  if (fs.existsSync(assetsPath)) {
    const assetFiles = fs.readdirSync(assetsPath);
    
    assetFiles.forEach(file => {
      const filePath = path.join(assetsPath, file);
      const size = getFileSize(filePath);
      totalSize += size;
      
      files.push({
        name: file,
        size: size,
        type: path.extname(file).substring(1)
      });
    });
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
  files.sort((a, b) => b.size - a.size);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  files.forEach(file => {
    const sizeStr = formatSize(file.size);
    const bar = '‚ñà'.repeat(Math.floor(file.size / totalSize * 20));
    console.log(`${file.name.padEnd(30)} ${sizeStr.padStart(10)} ${bar}`);
  });
  
  console.log('‚îÄ'.repeat(50));
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatSize(totalSize)}`);
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
  const byType = {};
  files.forEach(file => {
    if (!byType[file.type]) {
      byType[file.type] = { count: 0, size: 0 };
    }
    byType[file.type].count++;
    byType[file.type].size += file.size;
  });
  
  console.log('\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:');
  console.log('‚îÄ'.repeat(30));
  Object.entries(byType).forEach(([type, data]) => {
    console.log(`${type.padEnd(10)} ${data.count.toString().padStart(3)} —Ñ–∞–π–ª–æ–≤ ${formatSize(data.size).padStart(10)}`);
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  console.log('‚îÄ'.repeat(40));
  
  const jsFiles = files.filter(f => f.type === 'js');
  const cssFiles = files.filter(f => f.type === 'css');
  const imageFiles = files.filter(f => ['png', 'jpg', 'jpeg', 'webp', 'svg'].includes(f.type));
  
  if (jsFiles.length > 0) {
    const jsSize = jsFiles.reduce((sum, f) => sum + f.size, 0);
    console.log(`‚Ä¢ JavaScript: ${formatSize(jsSize)} (${jsFiles.length} —Ñ–∞–π–ª–æ–≤)`);
    
    if (jsSize > 500000) { // 500KB
      console.log('  ‚ö†Ô∏è  JavaScript –±–∞–Ω–¥–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:');
      console.log('     - –õ–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      console.log('     - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —á–∞–Ω–∫–∏');
      console.log('     - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞');
    }
  }
  
  if (cssFiles.length > 0) {
    const cssSize = cssFiles.reduce((sum, f) => sum + f.size, 0);
    console.log(`‚Ä¢ CSS: ${formatSize(cssSize)} (${cssFiles.length} —Ñ–∞–π–ª–æ–≤)`);
    
    if (cssSize > 100000) { // 100KB
      console.log('  ‚ö†Ô∏è  CSS –±–∞–Ω–¥–ª –±–æ–ª—å—à–æ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:');
      console.log('     - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∏–ª–µ–π');
      console.log('     - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS');
      console.log('     - –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é');
    }
  }
  
  if (imageFiles.length > 0) {
    const imageSize = imageFiles.reduce((sum, f) => sum + f.size, 0);
    console.log(`‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${formatSize(imageSize)} (${imageFiles.length} —Ñ–∞–π–ª–æ–≤)`);
    
    if (imageSize > 1000000) { // 1MB
      console.log('  ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:');
      console.log('     - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      console.log('     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebP/AVIF');
      console.log('     - –õ–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ stats.html
  const statsPath = path.join(distPath, 'stats.html');
  if (fs.existsSync(statsPath)) {
    console.log('\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ dist/stats.html');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeBundle();
